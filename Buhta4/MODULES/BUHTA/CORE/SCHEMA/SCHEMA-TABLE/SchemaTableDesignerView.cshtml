
@model SchemaTableDesignerModel

@{ Layout = "~/MODULES/BUHTA/CORE/SHARED/_Layout.cshtml"; }

<script>
    window._buhtaModelBindingId = "@Model.BindingId";
    window._buhtaRecordId = "@(Model.EditedObject!=null? Model.EditedObject.GetRecordId():string.Empty)";
</script>

@Html.bsTagBegin((tag) =>
{
    tag.Tag = "div";
    tag.AddClass("container body-content");
    tag.Bind_OnTrueClass(() => Model.IsInsertMode, "add-page");
    tag.Bind_OnFalseClass(() => Model.IsInsertMode, "edit-page");
})
@*<div class="container body-content edit-page">*@
    <div class="pull-right">
        @Html.bsButton((tag) =>
       {
           tag.Text = "Синхронизация с SQL";
           tag.Bind_OnClick(Model.SqlSyncButtonClick);
       })
        @Html.bsEditFormSaveButton((tag) => { tag.AddStyle("margin-left", "20px"); })
        @Html.bsEditFormCancelButton((tag) => { })
    </div>
    <h3>
        <img src="~/MODULES/BUHTA/CORE/Content/icon/SchemaTable_32.png" />
        @Html.bsSpan((span) =>
   {
       span.Bind_Text(() => Model.GetEditedObjectName());
   })
        <small>(таблица)</small>
    </h3>
    <ul class="nav nav-tabs" role="tablist">
        <li role="presentation" class="active"><a href="#home" aria-controls="home" role="tab" data-toggle="tab">Параметры</a></li>
        <li role="presentation">
            <a href="#columns" aria-controls="messages" role="tab" data-toggle="tab">
                Колонки <sup>@Html.bsSpan(() => Model.Table.Columns.Count.ToNumberInRoundBrackets())</sup>
            </a>
        </li>
        <li role="presentation"><a href="#profile" aria-controls="indexes" role="tab" data-toggle="tab">Индексы</a></li>
        <li role="presentation"><a href="#settings" aria-controls="settings" role="tab" data-toggle="tab">Прочее</a></li>
    </ul>
    <!-- Tab panes -->
    <div class="tab-content">
        <div role="tabpanel" class="tab-pane active" id="home">
            <h4 class="page-title" style="padding-top: 15px;">Основные параметры</h4>
            <div class="panel panel-info">
                @*<div class="panel-heading">
                        таблица подключена к серверу
                    </div>*@
                <div class="panel-body">
                    <form role="form" class="form-horizontal">
                        <div class="row">

                            @Html.bsInput(tag =>
                       {
                           tag.Bind_Value<String>(nameof(Model.Table) + "." + nameof(Model.Table.Name));
                           tag.Label = "Имя таблицы";
                           tag.AddStyle("max-width", "500px");
                       })

                            @Html.bsInput(tag =>
                       {
                           tag.Bind_Value<string>(nameof(Model.Table) + "." + nameof(Model.Table.Description));
                           tag.Label = "Описание";
                       })
                            @Html.bsInput(tag =>
                       {
                           tag.Type = bsInputType.List;
                           tag.Bind_Value_To_RolesList(nameof(Model.Table) + "." + nameof(Model.Table.TableRoles), new Таблица_TableRole());
                           tag.Label = "Роли";
                       })

                            @Html.bsInput(tag =>
                       {
                           //s.Type = bsInputType.Checkbox;
                           tag.Bind_Value<bool>(nameof(Model.Table) + "." + nameof(Model.Table.IsUserEditable));
                           tag.Label = "Редактируется пользователем (с сохранением истории)";
                       })
                            @Html.bsInput(tag =>
                       {
                           //s.Type = bsInputType.Checkbox;
                           tag.Bind_Value<bool>(nameof(Model.Table) + "." + nameof(Model.Table.IsSubconto));
                           tag.Label = "Может использоваться как субконто";
                       })
                            @Html.bsInput(tag =>
                       {
                           //s.Type = bsInputType.Checkbox;
                           tag.Bind_Value<bool>(nameof(Model.Table) + "." + nameof(Model.Table.IsProvodkaOwner));
                           tag.Label = "Может производить движение по регистрам (например, бух. документ)";
                       })
                            @Html.bsInput(tag =>
                       {
                           //s.Type = bsInputType.Checkbox;
                           tag.Bind_Value<bool>(nameof(Model.Table) + "." + nameof(Model.Table.IsNotSyncronize));
                           tag.Label = "Не синхронизировать структуру таблицы на sql-сервере";
                       })
                        </div>
                    </form>
                </div>
            </div>
        </div>
        <div role="tabpanel" class="tab-pane" id="profile">
            <h4 class="page-title" id="indexes" style="padding-top: 60px; margin-top: -40px;">Список индексов</h4>
            <div class="panel panel-primary">
                @*<div class="panel-heading">
                        таблица подключена к серверу
                    </div>*@
            </div>
        </div>
        <div role="tabpanel" class="tab-pane" id="columns">
            <h4 class="page-title" id="columns" style="padding-top: 60px; margin-top: -40px;">Список колонок</h4>
            <div class="panel panel-warning">
                <div class="panel-body" style="background-color: rgba(214, 214, 214, 0.0)">
                    @Html.bsGrid(grid =>
               {
                   Model.ColumnsGrid = grid;
                   grid.AddClass("cell-border");
                   grid.AddClass("compact");
                   grid.Bind_DataSource_To_ObjectsList(nameof(Model.Table) + "." + nameof(Model.Table.Columns), nameof(SchemaTableColumn.Name));

                   grid.Bind_OnRowSelect((args) =>
                   {
                       Model.SelectedColumnName = args.rowId;
                   });

                   grid.Bind_OnRowDblClick(Model.ColumnGridRowDblClick);

                   grid.AddColumn(col =>
                   {
                       col.Caption = "Имя колонки";
                       col.Field_Bind = nameof(SchemaTableColumn.Name);
                       col.AddClass(TextColor.KeyField);
                   });

                   grid.AddColumn(col =>
                   {
                       col.Caption = "Роль";
                       col.Field_Bind = nameof(SchemaTableColumn.RolesDisplayValue);
                   });

                   grid.AddColumn(col =>
                   {
                       col.Caption = "Тип данных";
                       col.Field_Bind = nameof(SchemaTableColumn.GetDataTypeDisplay);
                       col.AddClass(TextColor.DateTime);
                       //c.CellTemplate = @"<span style='font-size:1.2em'>{{GetDataTypeDisplay}}\n""</span>";
                   });

                   grid.AddColumn(col =>
                   {
                       col.Caption = "Описание";
                       col.Field_Bind = nameof(SchemaTableColumn.Description);
                       //                       c.CellTemplateJS = @"
                       // if (row.node.children) {
                       //   row._ee=' ('+row.node.children.length.toString()+')'
                       //   row._fontWeight='bold'
                       // }
                       // else
                       //   row._fontWeight='normal';
                       //";
                       //c.CellTemplate = "<span style='font-weight:{{_fontWeight}}'>{{Name}}</span>{{_ee}}";

                       //c.CellTemplate = "<span style='font-weight:bold'>{{Description}}</span>";
                       col.Align = bsGridColumnAlign.center;

                   });

                   grid.AddColumn(col =>
                   {
                       col.Caption = "Позиция";
                       col.Field_Bind = nameof(SchemaTableColumn.Position);
                       col.Sort = bsGridColumnSort.asc1;
                       col.Align = bsGridColumnAlign.right;
                       //  c.DataType = GridColumnDataType.Number;
                   });

               })
                    <div class="panel-body">
                        <div class="btn-group">
                            <button class="btn btn-default btn-sm">Отметить</button>
                            <button class="btn btn-default btn-sm">Убрать</button>
                        </div>
                        <div class="btn-group">
                            <button class="btn btn-default btn-sm">импорт</button>
                        </div>
                        <div class="btn-group  pull-right">
                            @Html.bsButton(button =>
                       {
                           button.Size = bsButtonSize.Small;
                           button.Bind_OnClick(Model.AddColumnButtonClick);
                           button.Text = "Добавить колонку";
                           button.AddClass("add-color");
                       })
                            @Html.bsButton(button =>
                       {
                           button.Size = bsButtonSize.Small;
                           button.Bind_OnClick(Model.EditColumnButtonClick);
                           button.Text = "Изменить";
                           button.AddClass("edit-color");
                           button.AddStyle("margin-left", "5px");
                       })
                            @Html.bsButton(button =>
                       {
                           button.Size = bsButtonSize.Small;
                           button.Bind_OnClick(Model.DeleteColumnButtonClick);
                           button.Text = "Удалить";
                           button.AddClass("delete-color");
                           button.AddStyle("margin-left", "5px");
                       })

                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div role="tabpanel" class="tab-pane" id="settings">
            пусто
            @*<br>
                @Html.bsButton(settings =>
                    {
                        settings.Bind_Disabled(() => !Model.GetNeedSave());
                        settings.Bind_OnClick(Model.SaveButtonClick);
                        settings.Text = "Сохранить?";
                    })
                <br>*@
        </div>
    </div>

@Html.bsTagEnd("div")
